@page "/checkout"
@attribute [Authorize]

@inject OrdersClient client
@inject OrderState OrderState
@inject NavigationManager navigation

<div class="main">
    <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrderAsync">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="OrderState.Order" />
            </div>
        </div>

        <div class="checkout-order-details">
            <h4>Deliver to...</h4>
            <AddressEditor Address="OrderState.Order.DeliveryAddress" />
        </div>

        <button type="submit" disabled="@isSubmitting" class="checkout-button btn btn-warning">
            Place order
        </button>

        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    bool isSubmitting;

    async Task PlaceOrderAsync()
    {
        try
        {
            isSubmitting = true;
            var newOrderId = await client.PlaceOrder(OrderState.Order);

            OrderState.ResetOrder();
            navigation.NavigateTo($"myorders/{newOrderId}");
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
