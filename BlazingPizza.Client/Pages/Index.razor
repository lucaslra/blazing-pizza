@page "/"

@inject PizzaClient pizzaClient
@inject NavigationManager navigation
@inject OrderState orderState
@inject IJSRuntime jsRuntime

@attribute [AllowAnonymous]

<div class="main">
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="(()=> orderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (orderState.Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in orderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza"
                                     OnRemoved="@(() => RemovePizza(configuredPizza))">
                </ConfiguredPizzaItem>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br />to get started</div>
    }

    <div class="order-total @(orderState.Order.Pizzas.Any() ? "":"hidden")">
        Total:
        <span class="total-price">@orderState.Order.GetFormattedTotalPrice()</span>
        <a href="checkout" class='@(orderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")'>
            Order>
        </a>
    </div>
</div>

<TemplatedDialog Show="orderState.ShowingConfigureDialog">
    <ConfigurePizzaDialog Pizza="orderState.ConfiguringPizza"
                          OnCancel="orderState.CancelConfigurePizzaDialog"
                          OnConfirm="orderState.ConfirmConfigurePizzaDialog"></ConfigurePizzaDialog>
</TemplatedDialog>

@code {
    IEnumerable<PizzaSpecial> specials;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            specials = await pizzaClient.GetSpecials();
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }

    private async Task RemovePizza(Pizza configuredPizza)
    {
        if (await jsRuntime.Confirm($"Remove {configuredPizza.Special.Name} pizza from the order?"))
        {
            orderState.RemoveConfigurePizza(configuredPizza);
        }
    }
}
