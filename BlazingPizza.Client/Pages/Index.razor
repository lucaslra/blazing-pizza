@page "/"
@inject HttpClient http
@inject NavigationManager navigation
@inject OrderState orderState

<div class="main">
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="(()=> orderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

<div class="sidebar">
    @if (orderState.Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in orderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza"
                                     OnRemoved="@(() => orderState.RemoveConfigurePizza(configuredPizza))">
                </ConfiguredPizzaItem>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br />to get started</div>
    }

    <div class="order-total @(orderState.Order.Pizzas.Any() ? "":"hidden")">
        Total:
        <span class="total-price">@orderState.Order.GetFormattedTotalPrice()</span>
        <button class="btn btn-warning" disabled="@(orderState.Order.Pizzas.Count == 0)" @onclick="PlaceOrderAsync">
            Order >
        </button>
    </div>
</div>

@if (orderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="orderState.ConfiguringPizza"
                          OnCancel="orderState.CancelConfigurePizzaDialog"
                          OnConfirm="orderState.ConfirmConfigurePizzaDialog"></ConfigurePizzaDialog>
}

@code {
    IList<PizzaSpecial> specials;

    protected async override Task OnInitializedAsync()
    {
        specials = await http.GetFromJsonAsync<List<PizzaSpecial>>("specials");
    }

    async Task PlaceOrderAsync()
    {
        var response = await http.PostAsJsonAsync("orders", orderState.Order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();
        orderState.ResetOrder();
        navigation.NavigateTo($"myorders/{newOrderId}");
    }
}
